class e{constructor(e){this.input=e,this.position=0,this.tokens=[]}tokenize(){for(;this.position<this.input.length;){let e=this.input[this.position];if(/\s/.test(e)){this.position++;continue}switch(e){case";":this._addToken("SEMICOLON",e);break;case"+":this._addToken("PLUS",e);break;case"-":this._addToken("MINUS",e);break;case"*":this._addToken("MULTIPLY",e);break;case"/":this._addToken("DIVIDE",e);break;case"%":this._addToken("MODULO",e);break;case"=":this._addToken("EQUALS",e);break;case">":this._addToken("GREATER_THAN",e);break;case"<":this._addToken("LESS_THAN",e);break;case"{":this._addToken("LBRACE",e);break;case"}":this._addToken("RBRACE",e);break;case"(":this._addToken("LPAREN",e);break;case")":this._addToken("RPAREN",e);break;case"[":this._addToken("LBRACKET",e);break;case"]":this._addToken("RBRACKET",e);break;case",":this._addToken("COMMA",e);break;case'"':this.tokens.push(this._readString());break;default:if(/[a-zA-Z]/.test(e))this.tokens.push(this._readIdentifierOrKeyword());else if(/\d/.test(e))this.tokens.push(this._readNumber());else throw Error(`Unexpected character: ${e}`)}}return this.tokens}_addToken(e,t){this.tokens.push({type:e,value:t}),this.position++}_readIdentifierOrKeyword(){let e=this.position;for(;/[a-zA-Z]/.test(this.input[this.position]);)this.position++;let t=this.input.slice(e,this.position);return{type:["yo","brofunc","bounce","spill","if","else","forEvery","squadGoals","dope","nope"].includes(t)?"KEYWORD":"IDENTIFIER",value:t}}_readNumber(){let e=this.position;for(;/\d/.test(this.input[this.position]);)this.position++;return{type:"NUMBER",value:this.input.slice(e,this.position)}}_readString(){let e=++this.position;for(;'"'!==this.input[this.position];)this.position++;let t=this.input.slice(e,this.position);return this.position++,{type:"STRING",value:t}}}class t{constructor(e,t){this.type=e,this.value=t,this.children=[]}}class s{constructor(e){this.tokens=e,this.position=0}parse(){let e=new t("Program",null);for(;this.position<this.tokens.length;)e.children.push(this._parseStatement());return e}_parseStatement(){let e=this.tokens[this.position];switch(console.log(`Parsing statement at position ${this.position}: ${e?e.type:"EOF"}`),e.type){case"KEYWORD":return this._parseKeywordStatement();case"IDENTIFIER":return this._parseExpressionStatement();default:throw Error(`Unexpected token: ${e.type}`)}}_parseKeywordStatement(){let e;let t=this.tokens[this.position++];switch(t.value){case"yo":e=this._parseVariableDeclaration();break;case"brofunc":e=this._parseFunctionDeclaration();break;case"spill":e=this._parsePrintStatement();break;case"if":e=this._parseIfStatement();break;case"forEvery":e=this._parseForEachLoop();break;case"squadGoals":e=this._parseConcurrencyBlock();break;default:throw Error(`Unexpected keyword: ${t.value}`)}return this._consume("SEMICOLON"),e}_parseVariableDeclaration(){let e=this.tokens[this.position++];this._consume("EQUALS");let s=this._parseExpression();return new t("VariableDeclaration",{identifier:e.value,expression:s})}_parseFunctionDeclaration(){let e=this.tokens[this.position++],s=this._parseParameters(),i=this._parseBlock();return new t("FunctionDeclaration",{name:e.value,parameters:s,body:i})}_parsePrintStatement(){let e=this._parseExpression();if(!e)throw Error("Failed to parse expression for spill statement");return new t("PrintStatement",{expression:e})}_parseIfStatement(){let e=this._parseExpression(),s=this._parseBlock(),i=null;return this._match("KEYWORD","else")&&(i=this._parseBlock()),new t("IfStatement",{condition:e,thenBranch:s,elseBranch:i})}_parseForEachLoop(){let e=this.tokens[this.position++];this._consume("KEYWORD","in");let s=this.tokens[this.position++],i=this._parseBlock();return new t("ForEachLoop",{element:e.value,list:s.value,body:i})}_parseConcurrencyBlock(){return new t("ConcurrencyBlock",this._parseBlock())}_parseExpressionStatement(){let e=this._parseExpression();return this._consume("SEMICOLON"),new t("ExpressionStatement",e)}_parseExpression(){let e=this._parsePrimary();for(;this._check("PLUS")||this._check("MINUS")||this._check("MULTIPLY")||this._check("DIVIDE")||this._check("MODULO");){let s=this.tokens[this.position++],i=this._parsePrimary();e=new t("BinaryExpression",{operator:s.value,left:e,right:i})}return e}_parsePrimary(){let e=this.tokens[this.position++];switch(e.type){case"IDENTIFIER":return new t("Identifier",e.value);case"NUMBER":case"STRING":return new t("Literal",e.value);default:throw Error(`Unexpected token in expression: ${e.type}`)}}_parseParameters(){let e=[];for(this._consume("LPAREN");!this._check("RPAREN");){let t=this.tokens[this.position++];e.push(t.value),this._check("RPAREN")||this._consume("COMMA")}return this._consume("RPAREN"),e}_parseBlock(){this._consume("LBRACE");let e=[];for(;!this._check("RBRACE");)e.push(this._parseStatement());return this._consume("RBRACE"),new t("Block",e)}_consume(e,t=null){if(this.position>=this.tokens.length)throw Error(`Unexpected end of input, expected token type ${e}`);let s=this.tokens[this.position];if(s.type!==e||null!==t&&s.value!==t)throw Error(`Expected token type ${e} but found ${s.type}`);this.position++}_check(e){return!(this.position>=this.tokens.length)&&this.tokens[this.position].type===e}_match(e,t){return!!this._check(e)&&this.tokens[this.position].value===t&&(this.position++,!0)}}class i{constructor(e){this.ast=e}analyze(){this._checkNode(this.ast)}_checkNode(e){if("Program"===e.type)e.children.forEach(e=>this._checkNode(e));else if("Expression"===e.type){if(!this._isDefined(e.value))throw Error(`Undefined identifier: ${e.value}`);e.children.forEach(e=>this._checkNode(e))}}_isDefined(e){return!0}}class r{constructor(){this.variables={}}interpret(e){this._executeBlock(e.children)}_executeBlock(e){for(let t of e)this._execute(t)}_execute(e){switch(e.type){case"Program":this._executeBlock(e.children);break;case"VariableDeclaration":this._executeVariableDeclaration(e);break;case"PrintStatement":this._executePrintStatement(e);break;case"ExpressionStatement":this._evaluate(e.value);break;case"IfStatement":this._executeIfStatement(e);break;case"ForEachLoop":this._executeForEachLoop(e);break;case"FunctionDeclaration":this._executeFunctionDeclaration(e);break;case"ConcurrencyBlock":this._executeBlock(e.value.children);break;default:throw Error(`Unknown node type: ${e.type}`)}}_executeVariableDeclaration(e){let t=this._evaluate(e.value.expression);this.variables[e.value.identifier]=t}_executePrintStatement(e){console.log(this._evaluate(e.value.expression))}_executeIfStatement(e){this._evaluate(e.value.condition)?this._executeBlock(e.value.thenBranch.children):e.value.elseBranch&&this._executeBlock(e.value.elseBranch.children)}_executeForEachLoop(e){for(let t of this.variables[e.value.list])this.variables[e.value.element]=t,this._executeBlock(e.value.body.children)}_executeFunctionDeclaration(e){this.variables[e.value.name]=e}_evaluate(e){if(!e)throw Error("Attempted to evaluate a null or undefined node");switch(console.log("Evaluating node:",e),e.type){case"Literal":return e.value;case"BinaryExpression":return this._evaluateBinaryExpression(e);case"Identifier":return this.variables[e.value];default:throw Error(`Unknown node type in evaluation: ${e.type}`)}}_evaluateBinaryExpression(e){let t=this._evaluate(e.value.left),s=this._evaluate(e.value.right);switch(e.value.operator){case"+":return t+s;case"-":return t-s;case"*":return t*s;case"/":return t/s;case"%":return t%s;default:throw Error(`Unknown operator: ${e.value.operator}`)}}}!function(){let t=new e('yo a = 5; yo b = a + 10; spill "test";').tokenize();console.log("Tokens:",t);let a=new s(t).parse();console.log(JSON.stringify(a,null,2)),new i(a).analyze(),console.log("Semantic analysis completed successfully."),new r().interpret(a)}();
//# sourceMappingURL=index.4c084828.js.map
